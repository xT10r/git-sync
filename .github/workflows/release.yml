name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  test:
    uses: ./.github/workflows/common.yml

  release:
    name: Create Release
    needs: test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.1.7

      - name: Set up Go
        uses: actions/setup-go@v5.0.1
        with:
          go-version: '1.21'

      # Build for Linux x64
      - name: Build for Linux x64
        run: |
          mkdir -p build/linux/x64
          GOOS=linux GOARCH=amd64 go build -o build/linux/x64/git-sync ./cmd/

      # Build for Windows x64
      - name: Build for Windows x64
        run: |
          mkdir -p build/windows/x64
          GOOS=windows GOARCH=amd64 go build -o build/windows/x64/git-sync.exe ./cmd/

      # Build for OSX x64
      - name: Build for OSX x64
        run: |
          mkdir -p build/osx/x64
          GOOS=darwin GOARCH=amd64 go build -o build/osx/x64/git-sync ./cmd/

      # Create tar.gz archive for Linux x64
      - name: Create tar.gz for Linux x64
        run: |
          tar -czvf build/git-sync-linux-amd64.tar.gz -C build/linux/x64 git-sync

      # Create zip archive for Windows x64
      - name: Create zip for Windows x64
        run: |
          zip -j build/git-sync-windows-x64.zip build/windows/x64/git-sync.exe

      # Create tar.gz archive for OSX x64
      - name: Create tar.gz for OSX x64
        run: |
          tar -czvf build/git-sync-osx-x64.tar.gz -C build/osx/x64 git-sync


      # Extract release notes from CHANGELOG.md
      - name: Extract release notes
        id: extract_release_notes
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          awk '/## \['"$VERSION"'\]/,/^## \[/' CHANGELOG.md | sed '$d' > release_notes.md
          if [ ! -s release_notes.md ]; then
            awk '/## \['"$VERSION"'\]/,/^$/' CHANGELOG.md > release_notes.md
          fi

      # Create a new release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body_path: ./release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload artifacts to release
      - name: Upload Linux x64 to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/git-sync-linux-amd64.tar.gz
          asset_name: git-sync-linux-amd64.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows x64 to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/git-sync-windows-x64.zip
          asset_name: git-sync-windows-x64.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload OSX x64 to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/git-sync-osx-x64.tar.gz
          asset_name: git-sync-osx-x64.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Docker release
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login docker registry
      - name: Log in to Docker Hub
        if: success() && startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image
      - name: Build and push Docker image
        if: startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            xt10r/git-sync:latest
            xt10r/git-sync:${{ github.ref_name }}

      # Clean Docker images
      - name: Clean up
        run: |
          docker image prune -f
